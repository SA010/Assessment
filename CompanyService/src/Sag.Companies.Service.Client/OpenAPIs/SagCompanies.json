{
  "openapi": "3.0.1",
  "info": {
    "title": "SAG API",
    "version": "1.0"
  },
  "paths": {
    "/Companies": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Endpoint to get all companies",
        "operationId": "GetCompaniesAsync",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Sag.Service.Companies.Application.Dtos.CompanyDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Companies"
        ],
        "summary": "Endpoint to create a company",
        "operationId": "CreateCompanyAsync",
        "requestBody": {
          "description": "The company to create",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Sag.Service.Companies.Application.Dtos.CompanyDto"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Sag.Service.Companies.Application.Dtos.CompanyDto"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Sag.Service.Companies.Application.Dtos.CompanyDto"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Sag.Service.Companies.Application.Dtos.CompanyDto"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Service.Companies.Application.Dtos.CompanyDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/Companies/{id}": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Endpoint to get a company by id",
        "operationId": "GetCompanyByIdAsync",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the company",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Service.Companies.Application.Dtos.CompanyDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Companies"
        ],
        "summary": "Endpoint to update an existing company",
        "operationId": "UpdateCompanyAsync",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the company",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The company to update",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Sag.Service.Companies.Application.Dtos.CompanyDto"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Sag.Service.Companies.Application.Dtos.CompanyDto"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Sag.Service.Companies.Application.Dtos.CompanyDto"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Sag.Service.Companies.Application.Dtos.CompanyDto"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Service.Companies.Application.Dtos.CompanyDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Companies"
        ],
        "summary": "Endpoint to delete an existing company",
        "operationId": "DeleteCompanyAsync",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the company",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ApiError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Sag.Framework.ExceptionHandlers.ApiError": {
        "type": "object",
        "properties": {
          "refId": {
            "type": "string",
            "nullable": true
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.ErrorDetails"
            },
            "nullable": true
          },
          "errorCode": {
            "type": "string",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Sag.Framework.ExceptionHandlers.Error": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Sag.Framework.ExceptionHandlers.ErrorDetails": {
        "type": "object",
        "properties": {
          "propertyName": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sag.Framework.ExceptionHandlers.Error"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Sag.Service.Companies.Application.Dtos.AddressDto": {
        "type": "object",
        "properties": {
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "houseNumber": {
            "type": "string",
            "nullable": true
          },
          "affix": {
            "type": "string",
            "nullable": true
          },
          "street": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "locationName": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Sag.Service.Companies.Domain.Enums.AddressTypes"
              }
            ],
            "description": "\n\n0 = None\n\n1 = Billing\n\n2 = Visiting\n\n4 = Working\n\n7 = All",
            "x-enumNames": [
              "None",
              "Billing",
              "Visiting",
              "Working",
              "All"
            ],
            "x-enumDescriptions": [
              "",
              "",
              "",
              "",
              ""
            ]
          },
          "contactPersonId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Sag.Service.Companies.Application.Dtos.CompanyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "contactPersons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sag.Service.Companies.Application.Dtos.ContactPersonDto"
            },
            "nullable": true
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sag.Service.Companies.Application.Dtos.AddressDto"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Sag.Service.Companies.Application.Dtos.ContactPersonDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "preposition": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "functionTitle": {
            "type": "string",
            "nullable": true
          },
          "isMainContactPerson": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Sag.Service.Companies.Domain.Enums.AddressTypes": {
        "enum": [
          0,
          1,
          2,
          4,
          7
        ],
        "type": "integer",
        "description": "\n\n0 = None\n\n1 = Billing\n\n2 = Visiting\n\n4 = Working\n\n7 = All",
        "format": "int32",
        "x-enumNames": [
          "None",
          "Billing",
          "Visiting",
          "Working",
          "All"
        ],
        "x-enumDescriptions": [
          "",
          "",
          "",
          "",
          ""
        ]
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      },
      "X-Api-Key": {
        "type": "apiKey",
        "description": "Api key needed to access the endpoints. X-Api-Key: My_API_Key",
        "name": "X-Api-Key",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": []
    },
    {
      "X-Api-Key": []
    }
  ]
}